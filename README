Stadium Ticket Flask RESTful API for GNU/Linux and Unix.

This project has been tested with Python 3.6 and 3.7 on the following
platforms:

+===========+===============+===============================+==========+
| OS Family | Distribution  | OS Version (OS Ports)         | Python   |
+===========+===============+===============================+==========+
| GNU/Linux | Amazon Linux  | 2 (x86_64)                    | 3.7.6    |
+-----------+---------------+-------------------------------+----------+
| GNU/Linux | CentOS        | 8 (x86_64)                    | 3.6.8    |
+-----------+---------------+-------------------------------+----------+
| GNU/Linux | Debian        | 10 (amd64, s390x)             | 3.7.3+   |
+-----------+---------------+-------------------------------+----------+
| GNU/Linux | Fedora        | 31 (x86_64)                   | 3.7.5+   |
+-----------+---------------+-------------------------------+----------+
| GNU/Linux | openSUSE      | Leap 15.1 (aarch64, x86_64)   | 3.6.5+   |
+-----------+---------------+-------------------------------+----------+
| GNU/Linux | openSUSE      | Tumbleweed 20200401 (x86_64)  | 3.7.3+   |
+-----------+---------------+-------------------------------+----------+
| GNU/Linux | Oracle Linux  | 8.1 (x86_64)                  | 3.6.8    |
+-----------+---------------+-------------------------------+----------+
| GNU/Linux | Raspbian      | 10 (armhf)                    | 3.7.3+   |
+-----------+---------------+-------------------------------+----------+
| GNU/Linux | Red Hat       | Enterprise Linux 8.1 (x86_64) | 3.6.8    |
+-----------+---------------+-------------------------------+----------+
| GNU/Linux | Ubuntu        | 18.04 LTS (amd64)             | 3.6.9+   |
+-----------+---------------+-------------------------------+----------+
| GNU/Linux | Ubuntu        | 19.10 (amd64)                 | 3.7.5+   |
+-----------+---------------+-------------------------------+----------+
| Unix      | Apple macOS   | 10.15 (x86_64)                | 3.7.6*   |
+-----------+---------------+-------------------------------+----------+
| Unix      | FreeBSD       | 11.3 (amd64)                  | 3.6.6    |
+-----------+---------------+-------------------------------+----------+
| Unix      | FreeBSD       | 12.1 (amd64)                  | 3.6.6    |
+-----------+---------------+-------------------------------+----------+
| Unix      | GhostBSD      | 20.03 (amd64)                 | 3.7.7    |
+-----------+---------------+-------------------------------+----------+
| Unix      | OpenIndiana   | Hipster 2019.10 (x86_64)      | 3.7.5*   |
+-----------+---------------+-------------------------------+----------+

NOTE: (*) denotes a non-native (third-party) Python interpreter
      (+) denotes installation as a service tested on platform

The various OS ports have been tested on the following processors:

+=========+====================================+=========+=========+
| CPU ISA | CPU Vendor and Microarchitecture   | 32 bit  | 64 bit  |
+---------+------------------------------------+---------+---------+
| ARMv8-A | ARM Cortex-A53                     | armhf   | aarch64 |
+---------+------------------------------------+---------+---------+
| x86-64  | Intel Haswell, SkyLake (Skylake-U, | i686    | amd64/  |
|         | Kaby Lake-U, Coffee Lake-S)        |         | x86_64  |
+---------+------------------------------------+---------+---------+
| z/Arch  | IBM z900 via Hercules emulator     | N/A     | s390x   |
+---------+------------------------------------+---------+---------+

1.  To install dependencies (may require root):

    scripts/install-dependencies

2.  To initialize the database schema:

    run-app python3 -m app create-database (or "make create-database")

3.  To run the unit tests using pytest:

    run-app pytest tests/unit (or "make pytest")

4.  To run the app in debugging mode:

    run-app flask run --port 5001 (or "make run-debug")

5.  To test the app in debugging mode:

    clients/app-test -h localhost -p 5001 (or "make client-debug")

6.  To stress test the app:

    clients/load-test (or "make stress")

7.  Build and run Docker container (may require root):

    docker-compose up --build (or "make docker-compose")

8.  To report the current status of the app service:

    get-app-status (or "make get-status")

9.  To install the app as a service (may require root):

    install-app

10. To start the app as a service (may require root):

    start-app

11. To stop the app as a service (may require root):

    stop-app

12. To uninstall the app as a service (may require root):

    uninstall-app
